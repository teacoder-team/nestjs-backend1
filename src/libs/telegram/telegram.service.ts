import { Injectable, UseFilters } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import type { User } from '@prisma/__generated__'
import { Command, Ctx, Start, Update } from 'nestjs-telegraf'
import { type Scenes, Telegraf } from 'telegraf'

import { TelegrafExceptionFilter } from '../common/filters/telegraf-exception.filter'
import { formatDate } from '../common/utils/format-date.util'

export interface Context extends Scenes.SceneContext {}

@Update()
@Injectable()
@UseFilters(TelegrafExceptionFilter)
export class TelegramService extends Telegraf {
	public constructor(private readonly configService: ConfigService) {
		super(configService.getOrThrow<string>('TELEGRAM_BOT_TOKEN'))
	}

	@Start()
	public async onStart(@Ctx() ctx: Context) {
		const message = `
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeaManager!</b>

–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.
`
		await ctx.replyWithHTML(message)
	}

	@Command('info')
	public async onInfo(@Ctx() ctx: Context) {
		const message = `
<b>–ß—Ç–æ —É–º–µ–µ—Ç TeaManager?</b>

–û–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
`
		await ctx.replyWithHTML(message)
	}

	public async sendNewUserMessage(user: User, count: number) {
		const message = `
<b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ</b>

–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∞—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${formatDate(user.createdAt)}
üìß <b>Email:</b> ${user.email}
üë§ <b>–ò–º—è:</b> ${user.displayName}

üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${count}
`

		await this.telegram.sendMessage(
			this.configService.getOrThrow<string>('TELEGRAM_CHAT_ID'),
			message,
			{
				parse_mode: 'HTML'
			}
		)
	}
}
