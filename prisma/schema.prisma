generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

// Таблица для пользователей
model User {
  id String @id @default(uuid())

  email    String  @unique
  password String?

  displayName String @map("display_name")
  username    String @unique
  picture     String @default("/uploads/users/default-avatar.png")

  points Int        @default(0)
  method AuthMethod

  role UserRole @default(STUDENT)

  accounts     Account[]
  userProgress UserProgress[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Таблица для аккаунтов
model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int?    @map("expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("accounts")
}

// Таблица для курсов
model Course {
  id String @id @default(uuid())

  name        String
  slug        String  @unique
  description String?

  features String[] @default([])

  imageUrl      String? @map("image_url")
  videoUrl      String? @map("video_url")
  repositoryUrl String? @map("repository_url")

  isPublished Boolean @default(false) @map("is_published")
  views       Int     @default(0)

  chapters Chapter[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

// Таблица с главами для курсов
model Chapter {
  id String @id @default(uuid())

  name        String
  slug        String  @unique
  description String?
  videoId     String? @map("video_id")

  position    Int     @default(0)
  isPublished Boolean @default(false) @map("is_published")

  userProgress UserProgress[]

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @map("course_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([courseId])
  @@map("chapters")
}

// Таблица с прогрессом пользователей
model UserProgress {
  id String @id @default(uuid())

  isCompleted Boolean @map("is_completed")

  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String?  @map("chapter_id")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, chapterId])
  @@map("user_progress")
}

model ResetToken {
  id String @id @default(uuid())

  email     String
  token     String   @unique
  expiresIn DateTime @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([email, token])
  @@map("reset_tokens")
}

// Роли для пользователей
enum UserRole {
  STUDENT
  ADMIN
}

// Методы для авторизации
enum AuthMethod {
  CREDENTIALS
  GOOGLE
  GITHUB
  YANDEX
}
